extends _base

block content
  section.content-header
    .container-fluid
      h4
        a.black(href="/rulecode/list")
          i.fa.fa-arrow-circle-left
        | 
        = __('Rule')
        | 
        | - 
        = rulecode.displayname

  if (runerrormessage)
    .row
      .col-md-8
        .callout.callout-danger
          span.text-danger
            i.icon.fa.fa-exclamation-triangle
            | 
            = __('Error in rules:')
            | 
            b
              = runerrormessage
          if (runerrorstack)
            p.monospace.small.pl-3.pt-3 !{runerrorstack.replace(/\n/g, '<br/>')}

  .row
    .col-md-8
      .btn-group
        button.btn(class= rulecode.Disabled ? "btn-warning" : "btn-primary" onclick="savecode()" title="ALT+SHIFT+S")
          i.fa.fa-upload
          | 
          = __('Upload %s', rulecode.displayname)
          if rulecode.Disabled
            | 
            = __('[disabled]')
          | 
        button.btn.btn-default(onclick="formatcode()" title="ALT+SHIFT+F")
          i.fa.fa-align-left
          | 
          = __('Reformat code')
    .col-md-4
      a.btn.btn-default.float-right(href="/rulecode/loglist/" + rulecode.Id target="_blank")
        i.fa.fa-list
        | 
        = __('Show logs')
  br

  .row
    .col-md-8
      .form-group
        textarea.form-control.monospace(rows=rulecodelinecount onkeypress="editorkeypress(event)" onkeydown="editorkeydown(event)")#codeeditor
          = rulecode.JsCode

    .col-md-4

      .card.card-outline.card-success
        .card-header
          .custom-control.custom-switch.float-right
            input#consoleautorefresh.custom-control-input(type='checkbox')
            label.custom-control-label(for='consoleautorefresh')
              = __('Auto refresh')
          button.btn.btn-default.btn-sm(onclick="refreshconsole(); return false;")
            = __('Console')
            | 
            small
              i.fa.fa-sync.text-primary
        .card-body.small.monospace(style="height:200px").p-0#consolearea
          textarea.form-control(readonly style="background:#fffff0; width: 100%; height: 100%;")#consoletext
            each line in runconsole
              = line + "\n"

      .card.card-outline.card-primary
        .card-header
          h3.card-title
            = __('Context')
        .card-body.small.monospace
          | console("Message to console window");
          small
            | 
            | // debug purpose
          br
          | log("Message");
          small
            | 
            | // long time purpose
          br
          br
          | atEveryMinute(() => { });
          br
          | atEveryHour(() => { });
          br
          | createTimeout("Alias", 60 * 1000, () => { });
          br
          | clearTimeout("Alias");
          br
          | createInterval("Alias", 10 * 1000, () => { });
          br
          | clearInterval("Alias");
          br
          br
          | now.(y | m | d | H | M | S | dow | time | HHMM | HH_MM)
          br
          br
          | (dawn|sunrise|sunset|dusk)
          br
          | .[addMinutes(+/-m)]
          br
          | .(date | H | M | HHMM | HH_MM)
          br
          br
          | OnceADay("name").(occured() | hasoccured)
          br
          br
          | &lt;device&gt;.&lt;entity&gt;.&lt;property&gt;
          br
          | &lt;device&gt;.&lt;entity&gt;.&lt;command&gt;([params, ...])
          br
          | &lt;device&gt;.&lt;entity&gt;.on('&lt;event&gt;', ([params, ...]) => { })
          small.float-right
            | &nbsp;&nbsp;&nbsp;see below...
            i.fa.fa-arrow-down

      .card.card-outline.card-primary
        .card-header
          h3.card-title
            = __('Devices')
        .card-body.small.monospace
          each device in devices
            - var items = [];
            - items.push(`<div style=\\'text-align:left\\'>`)
            each key of Object.keys(device.entities)
              each public of device.entities[key].publics
                - var value = device.entities[key][public];
                - value = (value == null) ? '' : ' = ' + value;
                - items.push(`${device.name}.${key}.<b>${public}</b> ${value}`)
              each action of device.entities[key].actions
                - var args = getFunctionArgs(action.handler)
                - items.push(`${device.name}.${key}.<b>${action.code}</b>(${args.join(', ')})`)
              each emitkey of Object.keys(device.entities[key].emits)
                - items.push(`${device.name}.${key}.on(<b>\\'${emitkey}\\'</b>, (${device.entities[key].emits[emitkey]}) => { })`)
              - items.push('')
            button.btn.btn-default.btn-xs.m-1(onclick="swal.fire({ icon: 'info', title: '" + device.name + "', html: 'Properties (= current values), commands and events<br/><br/>" + items.join("<br/>") + "', width: '800px', });")
              b
                = device.name
              small
                br
                = device.platform.GetName()

  script(type='text/javascript').
    function formatcode()
    {
      var code = $('#codeeditor').val();
      $.post('/rulecode/format', { rulecode: code })
        .done(function(response)
        {
          $('#codeeditor').val(response);
        })
        .fail(function(response)
        {
          swal.fire({
            icon: 'error',
            title: '#{__('Format code failed')}' ,
            text: response.responseText,
          });
        });
    }
    Mousetrap.bind('alt+shift+f', formatcode);

    function savecode()
    {
      var code = $('#codeeditor').val();
      $.post('/rulecode/update/#{rulecode.Id}', { rulecode: code })
        .done(function()
        {
          pagereload(350);
        })
        .fail(function(response)
        {
          swal.fire({
            icon: 'error',
            title: '#{__('Save code failed')}' ,
            text: response.responseText,
          });
        });
    }
    Mousetrap.bind('alt+shift+s', savecode);

    function editorkeypress(e)
    {
      if (e.which == 13)
      {
        var editor = $('#codeeditor');
        setTimeout(function()
        {
          var start = editor.prop('selectionStart');
          var v = editor.val();

          var prevLine = "";
          for (var i = start - 2; i >= 0 && v[i] != "\n"; i--)
            prevLine = v[i] + prevLine;

          var indentation = 0;
          for (var i = 0; i < prevLine.length && prevLine[i] == " "; i++)
            indentation++;

          editor.val(v.slice(0, start) + " ".repeat(indentation) + v.slice(start));
          editor.prop({ selectionStart: start + indentation, selectionEnd: start + indentation });
        }, 1);
      }
    }

    function editorkeydown(e)
    {
      if (e.key == 'F' && e.altKey && e.shiftKey)
        formatcode();
      if (e.key == 'S' && e.altKey && e.shiftKey)
        savecode();
    }

    function refreshconsole()
    {
      divreload('consolearea', scrolldownconsole);
    }
    function scrolldownconsole()
    {
      var textarea = $('#consoletext')[0];
      textarea.scrollTop = textarea.scrollHeight;
    }
    setInterval(function() {
      if ($('#consoleautorefresh').is(':checked'))
        refreshconsole() 
    }, 1000);
    $(scrolldownconsole);