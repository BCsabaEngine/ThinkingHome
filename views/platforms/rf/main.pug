extends ../../_base

block content
  section.content-header
    .container-fluid
      h5
        a.black(href="/platform")
          i.fa.fa-arrow-circle-left
          |  Platforms

  .row#content
    .col-md-3#settingpanel
      .card.card-widget.widget-user
        .widget-user-header.bg-info
          h3.widget-user-username
            = platform.GetName()
          h5.widget-user-desc Radio frequency
          .btn.btn-sm.btn-info.float-left(onclick="disableplatform('" + platform.GetCode() + "')")
            .fa.fa-pause
            |  Disable
        .widget-user-image
          img.img-circle.elevation-3(src="/platforms/rfwhite.png")
        .card-footer
          .row
            .col-sm.border-right
              .description-block
                h5.description-header
                  = Object.keys(handlers).length
                span.description-text DEVICE
            .col-sm
              .description-block
                h5.description-header
                  = devices.length
                span.description-text ACTIVE

        if (platform.GetStatusInfos() || []).length || Object.keys(platform.setting.toDisplayList() || {}).length
          .card-footer.p-3
            each statusinfo in (platform.GetStatusInfos() || [])
              if statusinfo.warning
                i.fa.fa-exclamation-triangle.text-warning
                | 
              if statusinfo.error
                i.fa.fa-times-circle.text-danger
                | 
              b
                = statusinfo.message
              if statusinfo.device
                | 
                small
                  | (
                  = statusinfo.device.name
                  | )
              if statusinfo.value
                span.float-right.badge.bg-primary
                  = statusinfo.value
              br
            if (platform.GetStatusInfos() || []).length
              hr

            if Object.keys(platform.setting.toDisplayList() || {}).length
              b
                | Config
            ul.nav.flex-column
              each settingitem, index in platform.setting.toDisplayList() || {}
                li.nav-item.noborder.pt-2.pl-2
                  if settingitem.type == "text"
                    - var onclick = "showsetting_text('" + index + "', '" + settingitem.title + "', '" + settingitem.value + "')";
                  else if settingitem.type == "select"
                    - var onclick = "showsetting_select('" + index + "', '" + settingitem.title + "', " + settingitem.lookup + ", '" + settingitem.value + "')";

                  = settingitem.title
                  if settingitem.canclear && settingitem.value
                    | 
                    a(href="#")
                      i.fa.fa-backspace.text-gray(onclick="clearsetting('" + index + "')")
                  a(href="#")
                    span.float-right.badge(class = settingitem.error ? "bg-red" : (settingitem.displayvalue || settingitem.value) ? "bg-primary" : "bg-gray", onclick=onclick)
                      = settingitem.displayvalue || settingitem.value || 'Not set'

        .card-footer.p-3
          | Create new device
        .card-footer.p-0
          each handler, code in handlers
            button.btn.btn-app.btn-app-wide(onclick="showcreatenewdevice('" + code + "', '" + handler.devicename + "', {})")
              i(class=handler.icon)
              != truncate(handler.displayname, 20)

        if autodevices && autodevices.length
          .card-footer.p-3
            | Attach discovered device
          .card-footer.p-0
            each autodevice in autodevices
              button.btn.btn-app.btn-app-wide(onclick="showcreatenewdevice(" + autodevice.type + ", '" + autodevice.devicename + "', " + autodevice.setting + ")")
                if (autodevice.badge)
                  .badge.bg-danger
                    =autodevice.badge
                i(class=autodevice.icon)
                = truncate(autodevice.displayname, 20)


    .col-md-9
      .row
        each device in devices
          .col-lg-4.col-md-6.col-sm-6.col-xs-6
            .small-box.bg-info
              .inner
                a.white(href='/platform/' + platform.GetCode() + '/device/' + device.name)
                  h3
                    = device.name
                    if (device.GetStatusInfos() || []).filter(si => si.warning).length
                      small
                        i.fa.fa-exclamation-triangle.text-warning.float-right
                    if (device.GetStatusInfos() || []).filter(si => si.error).length
                      small
                        i.fa.fa-times-circle.text-danger.float-right
                  p.float-right
                    != device.setting.toSubTitle()
                  p.text-bold
                    != device.setting.toTitle() || '&nbsp;'
              a.white(href='/platform/' + platform.GetCode() + '/device/' + device.name)
                .icon
                  i(class=device.icon)


  script(type='text/javascript').

    var subscribes = { platform_#{platform.GetCode()} : "content" };

    function disableplatform(code)
    {
      $.post("/platform/disable/", {code: code})
        .done(function() {
          window.location.href = '/platform/';
        });
    }
    async function showcreatenewdevice(type, devicename, settings)
    {
      if (typeof type === 'object')
      {
        var randomindex = Math.floor(Math.random() * Object.keys(type).length);
        var randomkey = Object.keys(type)[randomindex];
        var randomtype = type[randomkey].replace("&nbsp;", " ");
        selectresult = await Swal.fire({
          width: Object.keys(type).length > 5 ? '30%' : 800,
          title: 'Select type',
          text: 'Select corresponding type for this device. Is it ' + randomtype + '?', 
          input: Object.keys(type).length > 5 ? 'select' : 'radio',
          inputOptions: type,
          inputValue: Object.keys(type)[0],
          confirmButtonText: 'Select',
          showCancelButton: true,
        })
        if (!selectresult.isConfirmed)
          return;
        type = selectresult.value;
      }

      settings = settings || {};
      const suggestURL = '/suggestdevicename?devicename=' + devicename;

      let inputValue = devicename;
      inputValue = fetch(suggestURL)
        .then(response => response.json())
        .then(data => data.suggestion);

      Swal.fire({
        title: 'Create a new ' + type,
        text: 'Type unique name for this device. We suggest this one for example...',
        input: 'text',
        inputValue: inputValue,
        inputPlaceholder: 'Unique name of new device',
        confirmButtonText: 'Create',
        showCancelButton: true,
      })
      .then((result) => {
        if (result.value)
        {
          $.post("/platform/#{platform.GetCode()}/adddevice/", {type: type, name: result.value, settings: settings})
            .done(function(data) {
              window.location.href = '/platform/#{platform.GetCode()}/device/' + data;
            })
            .fail(function(error) {
              Swal.fire(
                'Error occured',
                error.responseText,
                'error'
              )            
            });
        }
      });
    }

    function clearsetting(name)
    {
      $.post(`/platform/#{platform.GetCode()}/setting/delete`, {name: name})
        .done(function(data) {
          divreload('settingpanel');
        })
        .fail(function(error) {
          Swal.fire(
            'Error occured',
            error.responseText,
            'error'
          )            
        });
    }
    function showsetting_text(name, title, value)
    {
      Swal.fire({
        title: title,
        input: 'text',
        inputValue: value, 
        inputPlaceholder: 'Type ' + title.toLowerCase(),
        showCancelButton: true,
      })
      .then((result) => {
        if (result.value) {
          $.post(`/platform/#{platform.GetCode()}/setting/update`, {name: name, value: result.value})
            .done(function(data) {
              divreload('settingpanel');
            })
            .fail(function(error) {
              Swal.fire(
                'Error occured',
                error.responseText,
                'error'
              )            
            });
        }
      })
    }
    function showsetting_select(name, title, lookup, value)
    {
      Swal.fire({
        title: title,
        input: 'select',
        inputValue: value, 
        inputPlaceholder: 'Select ' + title.toLowerCase(),
        showCancelButton: true,
        inputOptions: lookup,
      })
      .then((result) => {
        if (result.value) {
          $.post(`/platform/#{platform.GetCode()}/setting/update`, {name: name, value: result.value})
            .done(function(data) {
              divreload('settingpanel');
            })
            .fail(function(error) {
              Swal.fire(
                'Error occured',
                error.responseText,
                'error'
              )            
            });
        }
      })
    }
