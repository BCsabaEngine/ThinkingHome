extends _base

block content
  section.content-header
    .container-fluid
      h1= title

  each component, key in cmdcapabilitycomponents
    .row
      .col-md-12
        .card.card-lightblue
          .card-header
            h3.card-title
              = key.toUpperCase()
            .card-tools
              .btn-group
                button.btn.btn-default.btn-sm(type='button', onclick='statmode.' + key + ' = 1; LoadStatGraph_' + key + '();') Daily
                button.btn.btn-default.btn-sm(type='button', onclick='statmode.' + key + ' = 7; LoadStatGraph_' + key + '();') Weekly
                button.btn.btn-default.btn-sm(type='button', onclick='statmode.' + key + ' = 30; LoadStatGraph_' + key + '();') Monthly
          .card-body
            .row
              .col-md-2
                h1
                  = (ctxdevice.stat(key) || "?").toUpperCase()
              .col-md-4
                if component
                  each command in component
                    button.btn.btn-lg.btn-success(onclick="$.post('/device/" + device.Name + "/" + key + "/" + command + "');")
                      = command.toUpperCase()
            .row
              .col-md-1
                h5.float-right
                  br
                  .badge.badge-info(id="statpercent_" + key)
                  br
                  small(id="stattime_" + key)
              .col-md-11
                div(style="height: 120px;", id="stat_" + key)

  each component, key in telecapabilitycomponents
    .row
      .col-md-12
        .card.card-lightblue
          .card-header
            h3.card-title
              = key.toUpperCase()
            .card-tools
              .btn-group
                button.btn.btn-default.btn-sm(type='button', onclick='telemode.' + key + ' = 1; LoadTeleGraph_' + key + '();') Daily
                button.btn.btn-default.btn-sm(type='button', onclick='telemode.' + key + ' = 7; LoadTeleGraph_' + key + '();') Weekly
                button.btn.btn-default.btn-sm(type='button', onclick='telemode.' + key + ' = 30; LoadTeleGraph_' + key + '();') Monthly
          .card-body
            .row
              .col-md-2
                h1
                  = (ctxdevice.tele(key) !== undefined ? ctxdevice.tele(key) : "?")
                  small 
                    = ctxdevice.metric(key)
              .col-md-10
                div(style="height: 300px;", id="tele_" + key)

  .row
    .col-md-4
      .card.card-info.h-100
        .card-header
          h3.card-title Status
            small
              if devicesys
                =" Â· "
                = moment(devicesys.DateTime).fromNow()
        .card-body
          if !devicesys.Items || !devicesys.Items.length
            | Not arrived yet...
          else
            each devicesysitem in devicesys.Items
              .row
                .col-sm-4
                  = devicesysitem.Name
                .col-sm-8
                  b
                    = devicesysitem.Value
                  if (devicesysitem.SubValue)
                    small
                      = devicesysitem.SubValue
                  if (devicesysitem.ValueLink)
                    small
                      a(target='_blank' href=devicesysitem.ValueLink) 
                        i.fa.fa-external-link-alt
    .col-md-4
      .card.card-warning.h-100
        .card-header
          h3.card-title Last event
          .card-tools
            .btn-group
              a.btn.btn-default.btn-xs(href='/device/' + device.Name + '/events') All events
        .card-body
          if !devicelastevents || !devicelastevents.length
            | No events
          else
            each devicelastevent in devicelastevents
              .row
                .col-sm-6
                  .badge.badge-info
                    = devicelastevent.Event
                .col-sm-6
                  b
                    = devicelastevent.Data
                  br
                  small
                    = moment(devicelastevent.DateTime).fromNow()
    .col-md-4
      .card.card-olive.h-100
        .card-header
          h3.card-title Config
          .card-tools
            .btn-group
              button.btn.btn-default.btn-xs(onclick='$.post("/device/' + device.Name + '/config/push", null);')
                i.fas.fa-retweet
                |  Push to device
              button.btn.btn-primary.btn-xs(onclick='addConfig()')
                i.fas.fa-plus
                |  Add
        .card-body
          if !deviceconfigs || !deviceconfigs.length
            | No special config
          else
            each deviceconfig in deviceconfigs
              .row
                .col-sm-4
                  = deviceconfig.Name
                .col-sm-8
                  b(style='cursor:pointer', onclick='modifyConfig(' + deviceconfig.Id + ', "' + deviceconfig.Value + '")')
                    = deviceconfig.Value
                  .float-right
                    i.fa.fa-times.text-danger(style='cursor:pointer', onclick='deleteConfig(' + deviceconfig.Id + ', "' + deviceconfig.Name + '")')

  br

  .row
    .col-md-4
      .card.card-maroon.h-100
        .card-header
          h3.card-title MQTT Capability
        .card-body
          if !devicecapabilities || !devicecapabilities.length
            | Cannot determine yet...
          else
            each devicecapability in devicecapabilities
              .row
                if devicecapability.Items
                  .col-md-4
                    = devicecapability.Value
                  .col-md-8
                    if devicecapability.Items
                      | &nbsp;&nbsp;
                      each devicecapitem in devicecapability.Items
                        span.badge.badge-info
                          = devicecapitem
                        | &nbsp;&nbsp;
                else 
                  .col-md-12
                    = devicecapability.Value

  br

  script(type='text/javascript')
    | subscribes = { #{devicename} : function() { divreload('content-wrapper', () => {
    each component, key in cmdcapabilitycomponents
      | LoadStatGraph_#{key}();
    each component, key in telecapabilitycomponents
      | LoadTeleGraph_#{key}();
    |}) } };
  script(src='/plugins/jquery/jquery.min.js')
  script(src='/plugins/flot/jquery.flot.js')
  script(src='/plugins/flot-old/jquery.flot.resize.min.js')

  script(type='text/javascript')
    | var statmode = 
    | {
    each component, key in cmdcapabilitycomponents
      | #{key}: 1,
    | };
  script(type='text/javascript')
    | var telemode = 
    | {
    each component, key in telecapabilitycomponents
      | #{key}: 1,
    | };

  each component, key in cmdcapabilitycomponents
    script(type='text/javascript').
      
      function LoadStatGraph_#{key}() {
        var days = statmode.#{key};
        var url = "/device/#{device.Name}/graph/stat/#{key}/" + days;
        var timeformat = days > 1 ? "%b %d." : "%H:%M";
        var minTickSize = days > 1 ? (days > 15 ? [7, "day"] : [1, "day"]) : null;
        
        $.get(url, function(data)
        {
          var data = JSON.parse(data);
          
          var timeline = data.timeline;
          var time = data.time;
          var percent = data.percent;
          
          $('#stattime_#{key}').html(time);
          $('#statpercent_#{key}').html(percent + " %");

          var interactive_plot = $.plot('#stat_#{key}',
          [
            {
              data: timeline,
            },
          ],
          {
            grid: {
              borderColor: '#f3f3f3',
              borderWidth: 1,
              tickColor: '#f3f3f3',
              autoHighlight: true,
            },
            series: {
              color: '#3c8dbc',
              lines: {
                lineWidth: 1,
                show: true,
                fill: true,
              },
            },
            yaxis: {
              show: false,
            },
            xaxis: {
              show: true,
              mode: "time",
              timezone: "browser",
              timeBase: "milliseconds",
              timeformat: timeformat,
              minTickSize: minTickSize,
              showTicks: true,
            }
          });
        })
      };
      
      $(function () {
        LoadStatGraph_#{key}();
      });
      
  each component, key in telecapabilitycomponents
    script(type='text/javascript').
      
      function LoadTeleGraph_#{key}() {
        var days = telemode.#{key};
        var url = "/device/#{device.Name}/graph/tele/#{key}/" + days;
        var timeformat = days > 1 ? "%b %d." : "%H:%M";
        var minTickSize = days > 1 ? (days > 15 ? [7, "day"] : [1, "day"]) : null;
        
        $.get(url, function(data)
        {
          var timeline = JSON.parse(data);

          var interactive_plot = $.plot('#tele_#{key}',
          [
            {
              data: timeline,
            },
          ],
          {
            grid: {
              borderColor: '#f3f3f3',
              borderWidth: 1,
              tickColor: '#f3f3f3',
              autoHighlight: true,
            },
            series: {
              color: '#3c8dbc',
              lines: {
                lineWidth: 1,
                show: true,
                fill: false,
              },
            },
            yaxis: {
              show: true,
            },
            xaxis: {
              show: true,
              mode: "time",
              timezone: "browser",
              timeBase: "milliseconds",
              timeformat: timeformat,
              minTickSize: minTickSize,
              showTicks: true,
            }
          });
        })
      };
      
      $(function () {
        LoadTeleGraph_#{key}();
      });

    script(type='text/javascript').
      function addConfig()
      {
        $.get('/device/form/config/add', function(form)
        {
          var dialog = bootbox.dialog({
              title: 'Add new device config',
              message: form,
              buttons: {
                Cancel: {
                      label: "Cancel",
                      className: 'btn-default',
                },
                OK: {
                      label: "OK",
                      className: 'btn-primary',
                      callback: function()
                      {
                          var name = $('#name').val();
                          var value = $('#value').val();
                          
                          if (name && value)
                            $.post("/device/#{device.Name}/config/add", { name: name, value: value })
                              .done(function() {
                                bootbox.hideAll();
                                divreload('content-wrapper');
                              });
                          return false;
                      },
                },
              }
          });
        });
      }

      function modifyConfig(id, value)
      {
        $.get('/device/form/config/modify', function(form)
        {
          var dialog = bootbox.dialog({
              title: 'Modify device config',
              message: form,
              buttons: {
                Cancel: {
                      label: "Cancel",
                      className: 'btn-default',
                },
                OK: {
                      label: "OK",
                      className: 'btn-primary',
                      callback: function()
                      {
                          var value = $('#value').val();

                          $.post("/device/#{device.Name}/config/modify", { id: id, value: value })
                            .done(function() {
                              bootbox.hideAll();
                              divreload('content-wrapper');
                            });
                          return false;
                      },
                },
              }
          });
          $('#value').val(value);
        });
      }

      function deleteConfig(id, name)
      {
        bootbox.confirm("Are you sure to delete <b>" + name + "</b>?", function(result) {
          if (result)
          {
            $.post("/device/#{device.Name}/config/delete", { id: id })
              .done(function() {
                divreload('content-wrapper');
              });
          }
        })
      }
      